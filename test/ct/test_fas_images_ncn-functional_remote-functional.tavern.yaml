# MIT License

# (C) Copyright [2020-2021] Hewlett Packard Enterprise Development LP

# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

# Tavern test cases for the FAS images API
# Author: Mitch Schooler
# Service: Firmware Action Service

# HMS test metrics test cases: 2
# 1. GET /images API response code
# 2. GET /images API response body
# 3. Disabled (FAS images are not always pushed during install) - GET /images/{imageID} API response code
# 4. Disabled (FAS images are not always pushed during install) - GET /images/{imageID} API response body
---
test_name: Verify the images resource for all system images

stages:
  # 1. GET /images API response code
  # 2. GET /images API response body
  - name: Ensure that the FAS image records can be retrieved
    request:
      url: "{base_url}/fas/v1/images"
      method: GET
      headers:
        Authorization: "Bearer {access_token}"
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              images:
                # TODO: don't allow images map to be empty
                type: seq
                required: True
                matching: all
                sequence:
                - type: map
                  required: True
                  mapping:
                    imageID:
                      type: str
                      required: True
                    createTime:
                      type: timestamp
                      required: True
                    deviceType:
                      type: str
                      required: True
                      enum:
                        - "ChassisBMC"
                        - "chassisBMC"
                        - "NodeBMC"
                        - "nodeBMC"
                        - "RouterBMC"
                        - "routerBMC"
                    manufacturer:
                      type: str
                      required: True
                      enum:
                        - "cray"
                        - "gigabyte"
                        - "hpe"
                    models:
                      type: seq
                      required: True
                      matching: all
                      sequence:
                      - type: str
                        required: True
                    softwareIds:
                      type: seq
                      required: False
                      matching: all
                      sequence:
                      - type: str
                        required: True
                    target:
                      type: str
                      required: True
                    tags:
                      type: seq
                      required: True
                      matching: all
                      sequence:
                      - type: str
                        required: True
                        enum:
                          - "default"
                          - "persist"
                          - "recovery"
                          - "test"
                    firmwareVersion:
                      type: str
                      required: True
                    semanticFirmwareVersion:
                      type: str
                      required: True
                    updateURI:
                      type: str
                      required: False
                    needManualReboot:
                      type: bool
                      required: False
                    waitTimeBeforeManualRebootSeconds:
                      type: int
                      required: False
                    waitTimeAfterRebootSeconds:
                      type: int
                      required: False
                    pollingSpeedSeconds:
                      type: int
                      required: True
                    forceResetType:
                      type: str
                      required: False
                      enum:
                        - ""
                        - "ForceRestart"
                    s3URL:
                      type: str
                      required: True
                      pattern: "s3:/fw-update/.*|http://rgw-vip-fw:8080/fw-update/.*"
#---
#test_name: Verify the images resource for a specific image

#stages:
#  - name: Get a FAS imageID to use in the next stage
#    request:
#      url: "{base_url}/fas/v1/images"
#      method: GET
#      headers:
#        Authorization: "Bearer {access_token}"
#      verify: !bool "{verify}"
#    response:
#      status_code: 200
#      save:
#        json:
#          imageID: images[0].imageID

#  # 3. Disabled (FAS images are not always pushed during install) - GET /images/{imageID} API response code
#  # 4. Disabled (FAS images are not always pushed during install) - GET /images/{imageID} API response body
#  - name: Ensure that a specific FAS image record can be retrieved
#    request:
#      url: "{base_url}/fas/v1/images/{imageID}"
#      method: GET
#      headers:
#        Authorization: "Bearer {access_token}"
#      verify: !bool "{verify}"
#    response:
#      status_code: 200
#      verify_response_with:
#        function: tavern.testutils.helpers:validate_pykwalify
#        extra_kwargs:
#          schema:
#            type: map
#            required: True
#            mapping:
#              imageID:
#                type: str
#                required: True
#                enum:
#                  - "{imageID}"
#              createTime:
#                type: timestamp
#                required: True
#              deviceType:
#                type: str
#                required: True
#                enum:
#                  - "ChassisBMC"
#                  - "chassisBMC"
#                  - "NodeBMC"
#                  - "nodeBMC"
#                  - "RouterBMC"
#                  - "routerBMC"
#              manufacturer:
#                type: str
#                required: True
#                enum:
#                  - "cray"
#                  - "gigabyte"
#                  - "hpe"
#              models:
#                type: seq
#                required: True
#                matching: all
#                sequence:
#                - type: str
#                  required: True
#              softwareIds:
#                type: seq
#                required: False
#                matching: all
#                sequence:
#                - type: str
#                  required: True
#              target:
#                type: str
#                required: True
#              tags:
#                type: seq
#                required: True
#                matching: all
#                sequence:
#                - type: str
#                  required: True
#                  enum:
#                    - "default"
#                    - "persist"
#                    - "recovery"
#                    - "test"
#              firmwareVersion:
#                type: str
#                required: True
#              semanticFirmwareVersion:
#                type: str
#                required: True
#              updateURI:
#                type: str
#                required: False
#              needManualReboot:
#                type: bool
#                required: False
#              waitTimeBeforeManualRebootSeconds:
#                type: int
#                required: False
#              waitTimeAfterRebootSeconds:
#                type: int
#                required: False
#              pollingSpeedSeconds:
#                type: int
#                required: True
#              forceResetType:
#                type: str
#                required: False
#                enum:
#                  - ""
#                  - "ForceRestart"
#              s3URL:
#                type: str
#                required: True
#                pattern: "s3:/fw-update/.*|http://rgw-vip-fw:8080/fw-update/.*"
