# MIT License
#
# (C) Copyright [2020-2021] Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

# Tavern test cases for the FAS snapshots API
# Author: Mitch Schooler
# Service: Firmware Action Service

# HMS test metrics test cases: 12
# 1. POST /snapshots API response code
# 2. POST /snapshots API response body
# 3. GET /snapshots/{name} new snapshot API response code
# 4. GET /snapshots/{name} new snapshot API response body
# 5. GET /snapshots API response code
# 6. GET /snapshots API response body
# 7. GET /snapshots/{name} API response code
# 8. GET /snapshots/{name} API response body
# 9. DELETE /snapshots/{name} API response code
# 10. DELETE /snapshots{name} API response body
# 11. GET /snapshots/{name} deleted snapshot API response code
# 12. GET /snapshots/{name} deleted snapshot API response body
---
test_name: Verify the snapshots resource for creating a new snapshot

stages:
  - name: Delete existing FAS test snapshot (if present) to prevent conflict
    request:
      url: "{base_url}/fas/v1/snapshots/fasTestSnapshot"
      method: DELETE
      headers:
        Authorization: "Bearer {access_token}"
      verify: !bool "{verify}"

  # 1. POST /snapshots API response code
  # 2. POST /snapshots API response body
  - name: Ensure that a FAS snapshot can be generated for the system
    request:
      url: "{base_url}/fas/v1/snapshots"
      json: {"name":"fasTestSnapshot","stateComponentFilter":{"deviceTypes":["chassisBMC","nodeBMC","routerBMC"]},"targetFilter":{"targets":["BMC","BIOS"]}}
      method: POST
      headers:
        Authorization: "Bearer {access_token}"
      verify: !bool "{verify}"
    response:
      status_code: 201
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              name:
                type: str
                required: True
                enum:
                  - "fasTestSnapshot"

  # 3. GET /snapshots/{name} new snapshot API response code
  # 4. GET /snapshots/{name} new snapshot API response body
  - name: Ensure that the data for the new FAS snapshot can be retrieved and that the snapshot completes before proceeding
    max_retries: 50
    delay_after: 6
    request:
      url: "{base_url}/fas/v1/snapshots/fasTestSnapshot"
      method: GET
      headers:
        Authorization: "Bearer {access_token}"
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              name:
                type: str
                required: True
                enum:
                  - "fasTestSnapshot"
              captureTime:
                type: str
                required: True
                pattern: "[0-9]{{4}}-[0-9]{{2}}-[0-9]{{2}} [0-9]{{2}}:[0-9]{{2}}:[0-9]{{2}}.[0-9]+ .*[0-9]{{4}} UTC"
              ready:
                type: bool
                required: True
                enum:
                  - True
              devices:
                type: seq
                required: True
                matching: all
                sequence:
                - type: map
                  required: True
                  mapping:
                    xname:
                      type: str
                      required: True
                    targets:
                      type: seq
                      required: True
                      matching: all
                      sequence:
                      - type: map
                        required: True
                        mapping:
                          name:
                            type: str
                            required: True
                          firmwareVersion:
                            type: str
                            required: True
                          softwareId:
                            type: str
                            required: False
                          targetName:
                            type: str
                            required: True
                          imageID:
                            type: str
                            required: True
              relatedActions:
                type: seq
                required: True
                matching: all
                sequence:
                - type: map
                  required: True
                  mapping:
                    actionID:
                      type: str
                      required: True
                    startTime:
                      type: timestamp
                      required: True
                    endTime:
                      type: timestamp
                      required: True
                    state:
                      type: str
                      required: True
                      enum:
                        - "configured"
                        - "blocked"
                        - "completed"
              parameters:
                type: map
                required: True
                mapping:
                  name:
                    type: str
                    required: True
                    enum:
                      - "fasTestSnapshot"
                  stateComponentFilter:
                    type: map
                    required: True
                    mapping:
                      xnames:
                        type: seq
                        required: False
                        matching: all
                        sequence:
                        - type: str
                          required: True
                      deviceTypes:
                        type: seq
                        required: True
                        matching: all
                        sequence:
                        - type: str
                          required: True
                          enum:
                            - "chassisBMC"
                            - "nodeBMC"
                            - "routerBMC"
                  inventoryHardwareFilter:
                    type: map
                    required: True
                    mapping:
                      manufacturer:
                        type: str
                        required: False
                      model:
                        type: str
                        required: False
                  targetFilter:
                    type: map
                    required: True
                    mapping:
                      targets:
                        type: seq
                        required: True
                        matching: all
                        sequence:
                        - type: str
                          required: True
                          enum:
                            - "BMC"
                            - "BIOS"
---
test_name: Verify the snapshots resource for existing system snapshots

stages:
  # 5. GET /snapshots API response code
  # 6. GET /snapshots API response body
  - name: Ensure that the FAS snapshots for the system can be retrieved
    request:
      url: "{base_url}/fas/v1/snapshots"
      method: GET
      headers:
        Authorization: "Bearer {access_token}"
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              snapshots:
                type: seq
                required: True
                matching: all
                sequence:
                - type: map
                  required: True
                  mapping:
                    name:
                      type: str
                      required: True
                    captureTime:
                      type: str
                      required: True
                      pattern: "[0-9]{{4}}-[0-9]{{2}}-[0-9]{{2}} [0-9]{{2}}:[0-9]{{2}}:[0-9]{{2}}.[0-9]+ .*[0-9]{{4}} UTC"
                    ready:
                      type: bool
                      required: True
                    relatedActions:
                      type: seq
                      required: True
                      matching: all
                      sequence:
                      - type: map
                        required: True
                        mapping:
                          actionID:
                            type: str
                            required: True
                          startTime:
                            type: timestamp
                            required: True
                          endTime:
                            type: timestamp
                            required: True
                          state:
                            type: str
                            required: True
                            enum:
                              - "new"
                              - "configure"
                              - "blocked"
                              - "running"
                              - "completed"
                              - "abortSignaled"
                              - "aborted"
                    uniqueDeviceCount:
                      type: int
                      required: True

  - name: Get a FAS snapshot name to use in the next stage
    request:
      url: "{base_url}/fas/v1/snapshots"
      method: GET
      headers:
        Authorization: "Bearer {access_token}"
      verify: !bool "{verify}"
    response:
      status_code: 200
      save:
        json:
          snapshotName: snapshots[0].name

  # 7. GET /snapshots/{name} API response code
  # 8. GET /snapshots/{name} API response body
  - name: Ensure that the data for a FAS snapshot can be retrieved
    request:
      url: "{base_url}/fas/v1/snapshots/{snapshotName}"
      method: GET
      headers:
        Authorization: "Bearer {access_token}"
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              name:
                type: str
                required: True
                enum:
                  - "{snapshotName}"
              captureTime:
                type: str
                required: True
                pattern: "[0-9]{{4}}-[0-9]{{2}}-[0-9]{{2}} [0-9]{{2}}:[0-9]{{2}}:[0-9]{{2}}.[0-9]+ .*[0-9]{{4}} UTC"
              ready:
                type: bool
                required: True
              devices:
                type: seq
                required: True
                matching: all
                sequence:
                - type: map
                  required: True
                  mapping:
                    xname:
                      type: str
                      required: True
                    targets:
                      type: seq
                      required: True
                      matching: all
                      sequence:
                      - type: map
                        required: True
                        mapping:
                          name:
                            type: str
                            required: True
                          firmwareVersion:
                            type: str
                            required: True
                          softwareId:
                            type: str
                            required: False
                          targetName:
                            type: str
                            required: True
                          imageID:
                            type: str
                            required: True
              relatedActions:
                type: seq
                required: True
                matching: all
                sequence:
                - type: map
                  required: True
                  mapping:
                    actionID:
                      type: str
                      required: True
                    startTime:
                      type: timestamp
                      required: True
                    endTime:
                      type: timestamp
                      required: True
                    state:
                      type: str
                      required: True
                      enum:
                        - "new"
                        - "configure"
                        - "blocked"
                        - "running"
                        - "completed"
                        - "abortSignaled"
                        - "aborted"
              parameters:
                type: map
                required: True
                mapping:
                  name:
                    type: str
                    required: True
                    enum:
                      - "{snapshotName}"
                  stateComponentFilter:
                    type: map
                    required: True
                    mapping:
                      xnames:
                        type: seq
                        required: False
                        matching: all
                        sequence:
                        - type: str
                          required: True
                      partitions:
                        type: seq
                        required: False
                        matching: all
                        sequence:
                        - type: str
                          required: True
                      groups:
                        type: seq
                        required: False
                        matching: all
                        sequence:
                        - type: str
                          required: True
                      deviceTypes:
                        type: seq
                        required: False
                        matching: all
                        sequence:
                        - type: str
                          required: True
                  inventoryHardwareFilter:
                    type: map
                    required: True
                    mapping:
                      manufacturer:
                        type: str
                        required: False
                      model:
                        type: str
                        required: False
                  targetFilter:
                    type: map
                    required: True
                    mapping:
                      targets:
                        type: seq
                        required: False
                        matching: all
                        sequence:
                        - type: str
                          required: True
---
test_name: Verify the snapshots resource for deleting a snapshot

stages:
  # 9. DELETE /snapshots/{name} API response code
  # 10. DELETE /snapshots{name} API response body
  - name: Ensure that the new FAS snapshot can be deleted
    request:
      url: "{base_url}/fas/v1/snapshots/fasTestSnapshot"
      method: DELETE
      headers:
        Authorization: "Bearer {access_token}"
      verify: !bool "{verify}"
    response:
      status_code: 204

  # 11. GET /snapshots/{name} deleted snapshot API response code
  # 12. GET /snapshots/{name} deleted snapshot API response body
  - name: Ensure that the deleted FAS snapshot information can no longer be retrieved
    request:
      url: "{base_url}/fas/v1/snapshots/fasTestSnapshot"
      method: GET
      headers:
        Authorization: "Bearer {access_token}"
      verify: !bool "{verify}"
    response:
      status_code: 404
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
                enum:
                  - "about:blank"
              detail:
                type: str
                required: True
                enum:
                  - "Key /snapshots/fasTestSnapshot does not exist"
              status:
                type: int
                required: True
                enum:
                  - 404
              title:
                type: str
                required: True
                enum:
                  - "Not Found"
