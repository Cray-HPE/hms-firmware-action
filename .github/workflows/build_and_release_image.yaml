name: Build and Publish Docker Images
on: [push, pull_request]
jobs:
  build_and_release:
    env:
      DOCKER_REPO: cray-firmware-action
      DOCKER_TAG: 1.14.0
      artifactory_algol60_username: ${{ secrets.ARTIFACTORY_ALGOL60_USERNAME }}
      artifactory_algol60_token: ${{ secrets.ARTIFACTORY_ALGOL60_TOKEN }}
      cosign_gcp_project_id: ${{ secrets.COSIGN_GCP_PROJECT_ID }}
      cosign_gcp_sa_key: ${{ secrets.COSIGN_GCP_SA_KEY }}
      cosign_key: ${{ secrets.COSIGN_KEY }}
      docker_registry: "artifactory.algol60.net"
      github_sha: ${GITHUB_SHA}

    name: Build and Publish Docker Images
    runs-on: self-hosted #gotta access arti.dev.cray.com #${{ inputs.runs-on }} #we need self-hosted right now to get snyk
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.docker_registry }}/csm-docker/${{ startsWith(github.ref, 'refs/tags/v') && 'stable' || 'unstable' }}/${{ env.DOCKER_REPO}}
          labels: |
            org.opencontainers.image.vendor=Hewlett Packard Enterprise Development LP
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=${{ env.DOCKER_TAG }}
            type=semver,pattern={{version}},value=${{ env.DOCKER_TAG }}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }}
            type=sha,format=long

      - name: Login to algol60 Container Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.docker_registry }}
          username: ${{ env.artifactory_algol60_username }}
          password: ${{ env.artifactory_algol60_token }}

      - name: Set up Cloud SDK for Signing
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ env.cosign_gcp_project_id }}
          service_account_key: ${{ env.cosign_gcp_sa_key }}
          export_default_credentials: true

      - name: Generate build suffix
        uses: Cray-HPE/hms-build-scripts/generate-build-suffix@master
        id: build-suffix
        with:
          stable-branches-regex: master #${{ inputs.target-branch }}  # Hack, for right now we will assume that we have 1 branch that is considered stable, as the build-changed-charts-action doesn't support

#      - name: Print Sha
#        shell: bash
#        run: |
#          echo ${{ env.github_sha}}

#      - name: Make Image
#        shell: bash
#        run: |
#            sudo apt-get install make
#            make image

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Snyk setup
        uses: snyk/actions/setup@master

      - name: Snyk Scan
        run: snyk test --docker ${{ env.DOCKER_REPO }}:${{ env.DOCKER_TAG }}  --severity-threshold-${{env.SNYK_SEVERITY}} --skip-unresolved=true  #This doesnt exit
        shell: bash
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }} #${{ inputs.snyk_token }}
          SNYK_SEVERITY: high

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: image
          exit-code: ${{ env.TRIVY_EXIT_CODE}}
          image-ref: '${{ env.DOCKER_REPO }}:${{ env.DOCKER_TAG }}'
          severity: '${{ env.TRIVY_SEVERITY }}'
          hide-progress: false
        env:
          TRIVY_EXIT_CODE: 0
          TRIVY_SEVERITY: 'CRITICAL,HIGH'

#      - name: Run Unit Test
#        shell: bash
#        run: |
#          sudo apt-get install make
#          make unittest
#
#      - name: Run Integration Test
#        shell: bash
#        run: |
#          sudo apt-get install make
#          make integration

      - name: Install cosign
        uses: sigstore/cosign-installer@main
        with:
          cosign-release: 'v1.0.0'

      - name: Sign #always sign; Need to push first! look at: https://github.com/Cray-HPE/nexus3/blob/main/.github/workflows/build-image.yaml#L92-L96
        env:
          IMAGE: ${{ env.docker_registry }}/csm-docker/${{ startsWith(github.ref, 'refs/tags/v') && 'stable' || 'unstable' }}/${{ env.DOCKER_REPO}}
        run: cosign sign -key ${{ env.cosign_key }} $IMAGE

#        run: |
#          cosign sign -key ${{ env.cosign_key }} -a GIT_HASH=${{ env.github_sha }} ${{ env.DOCKER_REPO }}:${{ env.DOCKER_TAG }}
#        shell: bash

