name: Build and Publish Docker Images
on: [push, pull_request] # Question: Should this run on push/pull request? What is the value on pull_request?
jobs:
  build_and_release:
    env:
      DOCKER_REPO: cray-firmware-action
      DOCKER_TAG: 1.14.0 # Currently this is actually what it is, Like .version. Need to be dynamic
      DOCKER_REGISTRY: "artifactory.algol60.net"

    name: Build and Publish Docker Images
    runs-on: ubuntu-latest #gotta access arti.dev.cray.com #${{ inputs.runs-on }} #we need self-hosted right now to get snyk. TODO try the ubuntu runner
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # TODO Move all of the setup stuff up here.

      #
      # Setup build environment
      #
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to algol60 Container Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.ARTIFACTORY_ALGOL60_USERNAME }}
          password: ${{ secrets.ARTIFACTORY_ALGOL60_TOKEN }}

      - name: Set up Cloud SDK for Signing
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.COSIGN_GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.COSIGN_GCP_SA_KEY }}
          export_default_credentials: true

      - name: Install cosign
        uses: sigstore/cosign-installer@main
        with:
          cosign-release: 'v1.0.0'

      #
      # Build, scan, and sign container image
      #
      - name: Generate build suffix
        uses: Cray-HPE/hms-build-scripts/generate-build-suffix@master
        id: build-suffix
        with:
          stable-branches-regex: master #${{ inputs.target-branch }}  # Hack, for right now we will assume that we have 1 branch that is considered stable, as the build-changed-charts-action doesn't support

          # TODO Want to influence the docker tag. For unstable artifacts, lets do the same thing we have been doing. For stable builds TBD
      - name: Determine Image name
        id: image-name
        shell: bash
        run: |
          echo "::set-output name=${{ env.DOCKER_REGISTRY }}/csm-docker/${{ startsWith(github.ref, 'refs/tags/v') && 'stable' || 'unstable' }}/${{ env.DOCKER_REPO}}"
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ steps.image-name.outputs.name }}
          labels: |
            org.opencontainers.image.vendor=Hewlett Packard Enterprise Development LP
          tags: |
            type=schedule
            type=raw,value=${{ env.DOCKER_TAG }}
            type=semver,pattern={{version}},value=${{ env.DOCKER_TAG }}
            type=semver,pattern={{major}}
            type=semver,pattern={{major}}.{{minor}}
          # Note, the {{major}}, {{major}}.{{minor}} patterns only work on git tags
          # TODO Figure out remove latest

      - name: Build and push # Break apart build and push. Push after we scan the image. Note: Cosigning has use an image from artifactory.
        uses: docker/build-push-action@v2
        id: docker-build
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Current images
        run: docker images
        shell: bash


      # - name: Snyk setup
      #   uses: snyk/actions/setup@master

      # - name: Snyk Scan # TODO Look at converting to a real github actions instead of bash: https://github.com/snyk/actions/tree/master/docker
      #                   # TODO Expose continue-on-error. If stable build force build failure, for unstable push on.
      #   run: snyk test --docker ${{ steps.image-name.outputs.name }} --severity-threshold-${{env.SNYK_SEVERITY}} --skip-unresolved=true
      #   shell: bash
      #   env:
      #     SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }} #${{ inputs.snyk_token }}
      #     SNYK_SEVERITY: high # TODO This should be exposed as in input

      # - name: Run Trivy vulnerability scanner # Note: This will always exit 0, so if a problem is found it will continue on. TODO need a policy on how to use Trivy results
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     scan-type: image
      #     exit-code: ${{ env.TRIVY_EXIT_CODE}}
      #     image-ref: '${{ steps.image-name.outputs.name }}'
      #     severity: '${{ env.TRIVY_SEVERITY }}'
      #     hide-progress: false
      #   env:
      #     TRIVY_EXIT_CODE: 0 # TODO This should be exposed as in input
      #     TRIVY_SEVERITY: 'CRITICAL,HIGH' # TODO This should be exposed as in input

      # - name: Sign #always sign; Need to push first! look at: https://github.com/Cray-HPE/nexus3/blob/main/.github/workflows/build-image.yaml#L92-L96
      #   env:
      #     IMAGE: ${{ steps.image-name.outputs.name }} # TODO This needs to feed off of above. As we already pushed the image
      #   run: cosign sign -key ${{ env.cosign_key }} $IMAGE


#todos
#1 what do we do if snyk fails? an artifact has already been published?
#2 need to parameterize repo and semver
#3 need to clarify the build tags we want
#4 need to clarify how use gets notified if synk encounters an error; does it just keep on going? or does it stop?
#5 STRETCH objective : integrate SBOM
#6 where are we sending the snyk/trivy reports? Thinking about sending it to its OWN file in artifactory named: sha-digest.snky ; need to look at how the     - name: Publish Helm charts uploads and modify?