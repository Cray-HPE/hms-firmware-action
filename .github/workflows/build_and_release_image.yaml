name: Build and Publish Docker Images
on: [push, pull_request]

#  workflow_call:
#    inputs:
#      runs-on:
#        description: The type of machine to run the job on.
#        type: string
#        required: false
#        default: ubuntu-latest
#      target-branch:
#        description: Git repository branch to check against when determining charts that have changed.
#        type: string
#        required: false
#        default: "master"
#      artifactory-repo:
#        description: Repository in Artifactory to publish Helm charts to.
#        type: string
#        required: false
#        default: csm-helm-charts
#      artifactory-component:
#        description: The component is used to sort helm charts from the same repo internally in Artifactory.
#        type: string
#        required: true
#      enable-publish:
#        description: Control the ability for this workflow to publish artifacts to Artifactory and create Git tags.
#        type: boolean
#        required: false
#        default: true
#
#    secrets:
#      jfrog-cli-configuration:
#        description: JFrog CLI configuration with permissions to upload artifacts to Artifactory
#        required: true
jobs:
  build_and_release:
    env:
      DOCKER_REPO: cray-firmware-action
      DOCKER_TAG: 1.14.0

    name: Build and Publish Docker Images
    runs-on: self-hosted #gotta access arti.dev.cray.com #${{ inputs.runs-on }} #we need self-hosted right now to get snyk
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Generate build suffix
        uses: Cray-HPE/hms-build-scripts/generate-build-suffix@master
        id: build-suffix
        with:
          stable-branches-regex: master #${{ inputs.target-branch }}  # Hack, for right now we will assume that we have 1 branch that is considered stable, as the build-changed-charts-action doesn't support

      - name: Make Image
        shell: bash
        run: |
            sudo apt-get install make
            make image

      - name: Snyk Scan
        run: snyk test --docker ${{ env.DOCKER_REPO }}:${{ env.DOCKER_TAG }}  --severity-threshold-${{env.SNYK_SEVERITY}} --skip-unresolved=true  #This doesnt exit
        shell: bash
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }} #${{ inputs.snyk_token }}
          SNYK_SEVERITY: high

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: config
          exit-code: ${{ env.fail_on_trivy_action_vulnerabilities && '0' || '1' }}
          image-ref: '${{ env.DOCKER_REPO }}:${{ env.DOCKER_TAG }}'
          severity: '${{ env.TRIVY_SEVERITY }}'
          hide-progress: false
        env:
          fail_on_trivy_action_vulnerabilities: false
          TRIVY_SEVERITY: 'CRITICAL,HIGH'

      - name: Run Unit Test
        shell: bash
        run: |
          sudo apt-get install make
          make unittest

      - name: Run Integration Test
        shell: bash
        run: |
          sudo apt-get install make
          make integration

